from rdkit import Chem
from numpy import nan, pi


def get_charge_explicitHs(atom):
    return atom.GetDoubleProp('_GasteigerCharge')

get_charge_explicitHs.gasteiger_charges = True


def get_charge_implicitHs(atom):
    return atom.GetDoubleProp('_GasteigerCharge') +\
        atom.GetDoubleProp('_GasteigerHCharge')

get_charge_implicitHs.gasteiger_charges = True

na = nan

# Handbook of Chemistry and Physics, 94th Edition, 2013-2014, pg1-11
mass = [
    nan,
    # 1
    1.008, 4.002602,
    # 2
    6.94, 9.012182, 10.81, 12.011, 14.007, 15.999, 18.9984032, 20.1797,
    # 3
    22.98976928, 24.3050, 26.9815386, 28.085, 30.973762, 32.06, 35.45, 39.948,
    # 4
    39.0983, 40.078, 44.955912, 47.867, 50.9415, 51.9961, 54.938045, 55.845, 58.933195,
    58.6934, 63.546, 65.38, 69.723, 72.63, 74.92160, 78.96, 79.904, 83.798,
    # 5
    85.4678, 87.62, 88.90585, 91.224, 92.90638, 95.96, 98, 101.07, 102.90550,
    106.42, 107.8682, 112.411, 114.818, 118.710, 121.760, 127.60, 126.90447, 131.293,
    # 6
    132.9054519, 137.327,
    138.90547, 140.116, 140.90765, 144.242, 145, 150.36, 151.964, 157.25,
    158.92535, 162.500, 164.93032, 167.259, 168.93421, 173.054, 174.9668,
    178.49, 180.94788, 183.84, 186.207, 190.23, 192.217, 195.084,
    196.966569, 200.59, 204.38, 207.2, 208.98040, 210, 210, 222,
    # 7
    223, 226,
    227, 232.03806, 231.03588, 238.02891, 237, 244, 243, 247, 247, 251, 252, 257, 258, 259, 262,
    261, 262, 266, 264, 269, 268, 271
]


# Handbook of Chemistry and Physics, 94th Edition, 2013-2014, pg9-49
Rvdw = [
    nan,
    # 1
    1.10, 1.40,
    # 2
    1.82, 1.53, 1.92, 1.70, 1.55, 1.52, 1.47, 1.54,
    # 3
    2.27, 1.73, 1.84, 2.10, 1.80, 1.80, 1.75, 1.88,
    # 4
    2.75, 2.31, 2.15, 2.11, 2.07, 2.06, 2.05, 2.04, 2.00,
    1.97, 1.96, 2.01, 1.87, 2.11, 1.85, 1.90, 1.85, 2.02,
    # 5
    3.03, 2.49, 2.32, 2.23, 2.18, 2.17, 2.16, 2.13, 2.10,
    2.10, 2.11, 2.18, 1.93, 2.17, 2.06, 2.06, 1.98, 2.16,
    # 6
    3.43, 2.68,
    2.43, 2.42, 2.40, 2.39, 2.38, 2.36, 2.35, 2.34, 2.33, 2.31, 2.30, 2.29, 2.27, 2.26, 2.24,
    2.23, 2.22, 2.18, 2.16, 2.16, 2.13, 2.13, 2.14, 2.23, 1.96, 2.02, 2.07, 1.97, 2.02, 2.20,
    # 7
    3.48, 2.83,
    2.47, 2.45, 2.43, 2.41, 2.39, 2.43, 2.44, 2.45, 2.44, 2.45, 2.45, 2.45, 2.46, 2.46, 2.46,
]

Vvdw = [4./3.*pi*r**3 for r in Rvdw]

# Sanderson, RT. Electronegativity and Bond Energy.  J. Am. Chem. Soc. 1983, 105: 2259-2261.
# Remaining values come from http://www.talete.mi.it/help/dragon_help/weighting_schemes.htm
Sanderson = [
    nan,
    # 1
    2.592, na,
    # 2
    0.670, 1.810, 2.275, 2.746, 3.194, 3.654, 4.000, 4.5,
    # 3
    0.560, 1.318, 1.714, 2.138, 2.515, 2.957, 3.475, 3.31,
    # 4
    0.445, 0.946, 1.02, 1.09, 1.39, 1.66, 2.2, 2.2, 2.56,
    1.94, 2.033, 2.223, 2.419, 2.618, 2.816, 3.014, 3.219, 2.91,
    # 5
    0.312, 0.721, 0.65, 0.9, 1.42, 1.15, na, na, na,
    na, 1.826, 1.978, 2.138, 2.298, 2.458, 2.618, 2.778, 2.34,
    # 6
    0.220, 0.651,
    na, na, na, na, na, na, na, na, na, na, na, na, na, na, na,
    na, na, 0.98, na, na, na, na, na, 2.195, 2.246, 2.291, 2.342
]


# Handbook of Chemistry and Physics, 94th Edition, 2013-2014, pg10-188
Polarizabilities94 = [
    nan,
    # 1
    0.666793, 0.2050522,
    # 2
    24.33, 5.60, 3.03, 1.67, 1.10, 0.802, 0.557, 0.39432,
    # 3
    24.11, 10.6, 6.8, 5.53, 3.63, 2.90, 2.18, 1.6411,
    # 4
    43.06, 22.8, 17.8, 14.6, 12.4, 11.6, 9.4, 8.4, 7.5,
    6.8, 6.2, 5.75, 8.12, 5.84, 4.31, 3.77, 3.05, 2.4844,
    # 5
    47.24, 23.5, 22.7, 17.9, 15.7, 12.8, 11.4, 9.6, 8.6,
    4.8, 6.78, 7.36, 10.2, 7.84, 6.6, 5.5, 5.35, 4.044,
    # 6
    59.42, 39.7,
    31.1, 29.6, 28.2, 31.4, 30.1, 28.8, 27.7, 23.5, 25.5, 24.5, 23.6, 22.7, 21.8, 20.9, 21.9,
    16.2, 13.1, 11.1, 9.7, 8.5, 7.6, 6.5, 5.8, 5.02, 7.6, 7.01, 7.4, 6.8, 6.0, 5.3,
    # 7
    48.6, 38.3,
    32.1, 32.1, 25.4, 24.9, 24.8, 24.5, 23.3, 23.0, 22.7, 20.5, 19.7, 23.8, 18.2, 16.4, na,
    na, na, na, na, na, na, na, na, 4.06, na, 4.59, na, na, na, na,
    # 8
    24.26,
]

# Handbook of Chemistry and Physics, 78th Edition
Polarizabilities78 = [
    nan,
    # 1
    0.666793, 0.204956,
    # 2
    24.3,  5.6, 3.03, 1.76, 1.1,  0.802, 0.557, 0.3956,
    # 3
    23.6, 10.6, 6.8,  5.38, 3.63, 2.9,   2.18,  1.6411,

    # 4
    43.4, 22.8, 17.8, 14.6, 12.4, 11.6,  9.4,  8.4,  7.5,
    6.8,   6.1,  7.1,  8.12, 6.07, 4.31, 3.77, 3.05, 2.4844,

    # 5
    47.3, 27.6, 22.7, 17.9, 15.7, 12.8, 11.4, 9.6,  8.6,
    4.8,   7.2,  7.2, 10.2,  7.7,  6.6,  5.5, 5.35, 4.044,

    # 6
    59.6, 39.7,
    31.1, 29.6, 28.2, 31.4, 30.1, 28.8, 27.7, 23.5, 25.5, 24.5, 23.6, 22.7, 21.8, 21.0, 21.9,
    16.2, 13.1, 11.1,  9.7,  8.5,  7.6,  6.5,  5.8,  5.7,  7.6, 6.8,   7.4,  6.8,  6.0,  5.3,

    # 7
    48.7, 38.3,
    32.1, 32.1, 25.4, 27.4, 24.8, 24.5, 23.3, 23.0, 22.7, 20.5, 19.7, 23.8, 18.2, 17.5
]


# Handbook of Chemistry and Physics, 94th Edition, 2013-2014, pg10-197
Ionpotentials = [
    nan,
    # 1
    13.598443, 24.587387,
    # 2
    5.391719, 9.32270, 8.29802, 11.26030, 14.5341, 13.61805, 17.4228, 21.56454,
    # 3
    5.139076, 7.646235, 5.985768, 8.15168, 10.48669, 10.36001, 12.96763, 15.759610,
    # 4
    4.3406633, 6.11316, 6.56149, 6.82812, 6.74619, 6.76651, 7.43402, 7.9024, 7.88101,
    7.6398, 7.72638, 9.394199, 5.999301, 7.89943, 9.7886, 9.75239, 11.8138, 13.99961,
    # 5
    4.177128, 5.69485, 6.2173, 6.63390, 6.75885, 7.09243, 7.28, 7.36050, 7.45890,
    8.3369, 7.57623, 8.99382, 5.78636, 7.34392, 8.60839, 9.0096, 10.45126, 12.12984,
    # 6
    3.893905, 5.211664,
    5.5769, 5.5387, 5.473, 5.5250, 5.582, 5.6437, 5.67038, 6.14980,
    5.8638, 5.9389, 6.0215, 6.1077, 6.18431, 6.25416, 5.42586,
    6.82507, 7.54957, 7.86403, 7.83352, 8.43823, 8.96702, 8.9588,
    9.22553, 10.4375, 6.108194, 7.41663, 7.2855, 8.414, na, 10.7485,
    # 7
    4.072741, 5.278423,
    5.17, 6.3067, 5.89, 6.1941, 6.2657, 6.0260, 5.9738,
    5.9914, 6.1979, 6.2817, 6.42, 6.50, 6.58, 6.65, 4.9,
    6.0
]

period = [
    nan,
    1, 1,
    2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3,

    4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4,

    5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5,

    6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,

    7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
]


table = Chem.GetPeriodicTable()


# http://dx.doi.org/10.1002%2Fjps.2600721016
def GetNumValenceElectrons(atom):
    N = atom.GetAtomicNum()
    if N == 1:
        return 0

    Zv = table.GetNOuterElecs(N)
    Z = atom.GetAtomicNum()
    hi = atom.GetNumImplicitHs()
    he = sum((1 for a in atom.GetNeighbors() if a.GetAtomicNum() == 1))
    h = hi + he
    return float(Zv - h) / float(Z - Zv - 1)


def GetNumSigmaElectrons(atom):
    return sum((1 for a in atom.GetNeighbors()
                if a.GetAtomicNum() != 1))


# http://www.edusoft-lc.com/molconn/manuals/400/chaptwo.html
# p. 283
def IntrinsicState(atom):
    i = atom.GetAtomicNum()
    d = GetNumSigmaElectrons(atom)
    dv = GetNumValenceElectrons(atom)
    return ((2./period[i]) ** 2 * dv + 1) / d


def getter_Z(a):
    return a.GetAtomicNum()


def getter_m(a):
    return mass[a.GetAtomicNum()]


def getter_v(a):
    return Vvdw[a.GetAtomicNum()]


def getter_e(a):
    return Sanderson[a.GetAtomicNum()]


def getter_p(a):
    return Polarizabilities94[a.GetAtomicNum()]


def getter_i(a):
    return Ionpotentials[a.GetAtomicNum()]


def getter_s(a):
    return IntrinsicState(a)


getters = dict(
    Z=getter_Z,
    m=getter_m,
    v=getter_v,
    e=getter_e,
    p=getter_p,
    i=getter_i,
    s=getter_s
)


def getter(p):
    if hasattr(p, '__call__'):
        return p.__name__, p
    if p in getters:
        return p, getters[p]
    else:
        raise ValueError('unknown atomic property: {!r}'.format(p))
